import React from 'react';
import Diagram from './Diagram';
import WordBlock from './WordBlock';
import Keyboard from './Keyboard';
import ResetGame from './ResetGame.js';
import ModalTryAgain from './ModalTryAgain.js';
import ModalInfo from './ModalInfo';
import ModalWinner from './ModalWinner.js';
import randomWords from "random-words";

        /*
        *state.selectedLetters => are all the correct letters that the user has selected
        *state.word => the random word generated by randomWords package
        */
class Hangman extends React.Component {
    constructor(props) {
        super(props);

        this.state = {stage:0, word:'', selectedLetters:''}

        this.handleLetterSelection = this.handleLetterSelection.bind(this);
        this.reset = this.reset.bind(this);
    }
    /*
    *resets all states and keyboard button styles styles
    */
    reset() {
        document.getElementById('resetBtn').innerHTML = '<i class="bi bi-arrow-counterclockwise"></i> Reset Game';
        const randomWord = randomWords();
        this.setState({stage:1, word:randomWord, selectedLetters:''});
        console.log(randomWord);

        //get all keyboard btn elements and reset their styles
        const letterButtons = document.querySelectorAll('[data-btn="keyboard"]');
        for (const button of letterButtons) {
            button.className = "btn btn-outline-primary m-2 shadow keyboard-key";
            button.disabled = false;
        }
    }
    /*
    *Disable the selected letter-button and style appropriately (correct=>green, incorrect=>red)
    *Update relevant states: {stage, selectedLetters}
    */
    handleLetterSelection(e) {
        e.preventDefault();
        let chosenLetter = e.target.innerHTML.toLowerCase();
        let word = this.state.word;
        let selectedLetters = this.state.selectedLetters;
        if (!word) {
            // do nothing if there is no word
        } else {
            e.target.disabled = true;
            if (!word.includes(chosenLetter)) {
                e.target.className = 'btn btn-danger m-2 shadow keyboard-Key';
                this.manageStage();
            } else {
                e.target.className = 'btn btn-success m-2 shadow keyboard-Key';
                let newSelectedLetters = selectedLetters.concat(chosenLetter);
                this.setState({selectedLetters: newSelectedLetters});
                this.checkForWins(newSelectedLetters);
            }
        }
    }
    /*
    *increments state.stage
    */
    manageStage() {
        const stageNum = this.state.stage;
        if (stageNum < 11) {
            this.setState({stage: stageNum + 1});
        } else {}
            
        //simulates click on invisible btn that triggers ModalTryAgain component
        if (stageNum + 1 >= 11) {
            document.getElementById('modalTryAgainInvisibleBtn').click(); 
            this.keyboardBtnsDisabled(true);
        }
    }
    /*
    *evaluates if the user has guessed all the correct letters.
    *compares state.word with state.selectedLetters to see if there
    *are any correct letters missing from the users selectedLetters.
    *displays ModalWinner if all letters in state.word are inlcuded in state.selectedLetters
    */
    checkForWins(selectedLetters) {
        const word = this.state.word;
        // const selectedLetters = this.state.selectedLetters;
        let winner = true;
        for (let chr of word) {
            if (!selectedLetters.includes(chr)) {
                winner = false;
                return 
            }
        }
        if (winner) 
            //simulates click on invisible btn that triggers ModalTryAgain component
            setTimeout(() => {
                document.getElementById('modalWinnerInvisibleBtn').click();
                this.keyboardBtnsDisabled(true);
            }, 1000);
    }
    /*
    *sets disabled to true/false for all keyboard buttons
    */
    keyboardBtnsDisabled(boolean) {
        const letterButtons = document.querySelectorAll('[data-btn="keyboard"]');  
        for (const button of letterButtons) {
            button.disabled = boolean;
        }
    }

    render () {
        return (
            <div>
                <ModalTryAgain reset={this.reset} correctWord={this.state.word}/>
                <ModalInfo/>   
                <ModalWinner reset={this.reset}/>

                {/* Invisible buttons used to trigger Modals */}
                <button type="button" id="modalTryAgainInvisibleBtn" class="d-none" data-toggle="modal" data-target="#modalTryAgain"></button>
                <button type="button" id="modalWinnerInvisibleBtn" class="d-none" data-toggle="modal" data-target="#modalWinner"></button>
                
                <div>
                    <ResetGame reset={this.reset}/>     
                    <button type="button" class="btn btn-outline-info border-0 ml-2 p-1" data-toggle="modal" data-target="#modalInfo"> {/*help button*/}
                    <i class="bi bi-question-circle lead"></i> 
                    </button>               
                </div>

                <Diagram stage={this.state.stage}/>
                <WordBlock word={this.state.word} selectedLetters={this.state.selectedLetters}/>   
                <Keyboard handleLetterSelection={this.handleLetterSelection}/>             
            </div>

        )
    }
}

export default Hangman